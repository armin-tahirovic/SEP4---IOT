/*
* loraWANHandler.c
*
* Created: 12/04/2019 10:09:05
*  Author: IHA
*/
#include <stddef.h>
#include <stdio.h>

#include <ATMEGA_FreeRTOS.h>

#include <lora_driver.h>
#include <iled.h>

#include "Room.h"

// Parameters for OTAA join - You have got these in a mail from IHA
#define LORA_appEUI "83763DD972A2047E"
#define LORA_appKEY "FF5CD73C76BB0D52125AC100321E6642"

static char _out_buf[100];

void lora_handler_task( void *pvParameters );
void Downlink_Task( void *pvParameters );

static lora_payload_t _uplink_payload;

 MessageBufferHandle_t down_link_message_buffer_handle;


void lora_handler_create(UBaseType_t lora_handler_task_priority, MessageBufferHandle_t down_link)
{
	down_link_message_buffer_handle = down_link;
	
	xTaskCreate(
	lora_handler_task
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	
		xTaskCreate(
		Downlink_Task
		,  (const portCHAR *)"LRHand"  // A name just for humans
		,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));

		if ( rc != LoRa_ACCEPTED)
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
		}
	}
}

/*-----------------------------------------------------------*/

void lora_handler_task( void *pvParameters )
{
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
	vTaskDelay(2);
	lora_driver_reset_rn2483(0);
	// Give it a chance to wakeup
	vTaskDelay(150);

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
	_uplink_payload.port_no = 2;

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
	
	lora_payload_t downlink_payload;
	
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );

//
		// Some dummy payload
		uint16_t hum = getHumidity(humidity_sensor);
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = getCO2(co2_sensor);
		// activity true = all ones

		_uplink_payload.bytes[0] = hum >> 8;
		_uplink_payload.bytes[1] = hum & 0xFF;
		_uplink_payload.bytes[2] = temp >> 8;
		_uplink_payload.bytes[3] = temp & 0xFF;
		_uplink_payload.bytes[4] = co2_ppm >> 8;
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;

		led_short_puls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
		
	
	}
}




void Downlink_Task( void *pvParameters )
{

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(1000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
	
	uint16_t max_hum_setting; // Max Humidity
	int16_t max_temp_setting; // Max Temperature
	int16_t third_byte;
	
	
	lora_payload_t downlink_payload;
	for(;;)
	{
			//vTaskDelayUntil( &xLastWakeTime, xFrequency );
			
	
		
		printf("Down link ready \n")
		xMessageBufferReceive(down_link_message_buffer_handle, &downlink_payload, sizeof(lora_payload_t), portMAX_DELAY);
		
		printf("DOWN LINK: from port: %d with %d bytes received! \n", downlink_payload.port_no, downlink_payload.len); // Just for Debug

		if (4 == downlink_payload.len) // Check that we have got the expected 4 bytes
		{
			// decode the payload into our variables
			max_hum_setting = (downlink_payload.bytes[0] << 8) + downlink_payload.bytes[1];
			max_temp_setting = (downlink_payload.bytes[2] << 8) + downlink_payload.bytes[3];
		}
		
		if (6 == downlink_payload.len) // Check that we have got the expected 4 bytes
		{
			// decode the payload into our variables
			max_hum_setting = (downlink_payload.bytes[0] << 8) + downlink_payload.bytes[1];
			max_temp_setting = (downlink_payload.bytes[2] << 8) + downlink_payload.bytes[3];
			third_byte = (downlink_payload.bytes[4] << 8) + downlink_payload.bytes[5];
		}
		
		printf("Byte 0: %d \n Byte 1: %d \n", downlink_payload.bytes[0], downlink_payload.bytes[1]);

lora_driver_flush_buffers();
	}
}
